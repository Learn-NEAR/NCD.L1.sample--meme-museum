{"version":3,"file":"meme.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/utils.js","../src/meme/models.ts","../src/utils.ts","../src/meme/contract.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import { assert, near } from \"near-sdk-js\";\nimport { storageRead, storageWrite } from \"near-sdk-js/lib/api\";\nimport { Category, MEME_KEY } from \"../utils\";\n\nexport class Comment {\n  created_at: bigint = near.blockTimestamp() as bigint;\n  author: string = near.signerAccountId();\n\n  constructor(public text: string) {}\n}\n\nexport class Vote {\n  created_at: bigint = near.blockTimestamp() as bigint;\n\n  constructor(public value: number, public voter: string) {}\n}\n\nexport class Donation {\n  // by default, without a constructor, all fields are public\n  // so these instance fields will be set from the context\n  // and then available on the public interface\n  amount: bigint = near.attachedDeposit() as bigint;\n  donor: string = near.predecessorAccountId();\n  created_at: bigint = near.blockTimestamp() as bigint;\n}\n\nexport class Meme {\n  creator: string = near.predecessorAccountId();\n  created_at: bigint = near.blockTimestamp() as bigint;\n  vote_score: number = 0;\n  total_donations: bigint = BigInt(0);\n\n  constructor(\n    public title: string,\n    public data: string,\n    public category: Category\n  ) {}\n\n  // ----------------------------------------------------------------------------\n  // Basic functions\n  // ----------------------------------------------------------------------------\n\n  static create(title: string, data: string, category: Category): void {\n    // data has to have identifier from valid content provider\n    assert(\n      isValidMemeData(data),\n      \"Data is not valid, must start with valid 9gag.com URL\"\n    );\n\n    // save the meme to storage\n    const meme = new Meme(title, data, category);\n    this.set(meme);\n  }\n\n  static get(): Meme {\n    return JSON.parse(storageRead(MEME_KEY));\n  }\n\n  static set(meme: Meme): void {\n    storageWrite(MEME_KEY, JSON.stringify(meme));\n  }\n}\n\n/**\n * Handle validation and extraction of meme data\n */\nfunction isValidMemeData(data: string): boolean {\n  return data.startsWith(\"https://9gag.com\");\n}\n","import { assert, near, Vector } from \"near-sdk-js\";\nimport { Meme } from \"./meme/models\";\nimport { Museum } from \"./museum/models\";\n\nexport enum Category {\n  A,\n  B,\n  C,\n  D,\n}\n\nexport const ONE_NEAR = BigInt(10e24);\nexport const XCC_GAS = BigInt(2 * 10e14);\nexport const MIN_ACCOUNT_BALANCE = ONE_NEAR * BigInt(3);\n\n// common keys for singlton instances and initialization\nexport const MEME_KEY = \"state\";\nexport const MUSEUM_KEY = \"state\";\n\n// size constraints\nexport const PAGE_SIZE = 10;\nexport const MAX_COMMENT_LENGTH = 500;\n\nexport function getLast<T>(vector: Vector, n: number = PAGE_SIZE): Array<T> {\n  const returnArray = new Array<T>(0);\n\n  for (let i = vector.len() - n - 1; i < vector.len(); i++) {\n    returnArray.push(vector.get(i) as T);\n  }\n\n  return returnArray;\n}\n\nexport function isInitialized(key: string): boolean {\n  return near.storageHasKey(key);\n}\n\nexport function isCreator(): boolean {\n  return near.predecessorAccountId() === Meme.get().creator;\n}\n\nexport function assertIsInitialized(key: string): void {\n  assert(isInitialized(key), \"Contract is not initialized\");\n}\n\nexport function assertIsNotInitialized(key: string): void {\n  assert(!isInitialized(key), \"Contract is already initialized\");\n}\n\nexport function assertIsSignedByCreator(): void {\n  assert(isCreator(), \"This method can only be called by the meme creator\");\n}\n\nexport function assertReasonableCommentLength(text: string): void {\n  assert(\n    text.length < MAX_COMMENT_LENGTH,\n    `Comment is too long, must be less than ${MAX_COMMENT_LENGTH}`\n  );\n}\n\nexport function assertIsSignerPredecessor(): void {\n  assert(\n    near.signerAccountId() === near.predecessorAccountId(),\n    \"Users must call this method directly\"\n  );\n}\n\nexport function fullAccount(meme: string): string {\n  return `${meme}.${near.currentAccountId()}`;\n}\n","import {\n  NearBindgen,\n  NearContract,\n  near,\n  call,\n  view,\n  Vector,\n  LookupSet,\n  assert,\n} from \"near-sdk-js\";\nimport {\n  assertIsInitialized,\n  assertIsNotInitialized,\n  assertIsSignedByCreator,\n  assertIsSignerPredecessor,\n  assertReasonableCommentLength,\n  Category,\n  getLast,\n  MEME_KEY,\n  MIN_ACCOUNT_BALANCE,\n  XCC_GAS,\n} from \"../utils\";\nimport { Donation, Meme, Vote } from \"./models\";\n\nBigInt.prototype[\"toJSON\"] = function () {\n  return this.toString();\n};\n\n// The @NearBindgen decorator allows this code to compile to Base64.\n@NearBindgen\nexport class MemeContract extends NearContract {\n  private comments: Vector;\n  private votes: Vector;\n  private voters: LookupSet;\n  private donations: Vector;\n\n  constructor({\n    defaultCall,\n    title = \"\",\n    data = \"\",\n    category = Category.A,\n  }: {\n    title?: string;\n    data?: string;\n    category?: Category;\n    defaultCall: boolean;\n  }) {\n    //execute the NEAR Contract's constructor\n    super();\n\n    if (defaultCall) {\n      return;\n    }\n\n    // contract may only be initialized once\n    assertIsNotInitialized(MEME_KEY);\n\n    // storing meme metadata requires some storage staking (balance locked to offset cost of data storage)\n    assert(\n      near.attachedDeposit() >= MIN_ACCOUNT_BALANCE,\n      \"Minimum account balance must be attached to initialize this contract (3 NEAR)\"\n    );\n\n    // title has to be at least 1 character\n    assert(title.length > 0, \"Meme title may not be blank\");\n\n    // create the meme using incoming metadata\n    Meme.create(title, data, category);\n  }\n\n  default() {\n    return new MemeContract({ defaultCall: true });\n  }\n\n  /**\n   * Return the meme\n   */\n  @view\n  get_meme(): Meme {\n    assertIsInitialized(MEME_KEY);\n    return Meme.get();\n  }\n\n  // ----------------------------------------------------------------------------\n  // Voting\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Register a single vote, up or down, for the meme\n   */\n  @call\n  vote({ value }: { value: number }): void {\n    assertIsInitialized(MEME_KEY);\n    assertIsSignerPredecessor();\n    assert(value === 1 || value === -1, \"Invalid vote, must be -1 or 1\");\n\n    // register the vote\n    this.batch_vote({ value, is_batch: false });\n  }\n\n  /**\n   * Register a batched vote where several votes are captured together\n   */\n  @call\n  batch_vote({\n    value,\n    is_batch = true,\n  }: {\n    value: number;\n    is_batch: boolean;\n  }): void {\n    // register the vote\n    if (is_batch) {\n      assert(\n        near.predecessorAccountId() === near.currentAccountId(),\n        \"Batch votes may only be made by the Meme account\"\n      );\n    }\n\n    const voter = is_batch\n      ? \"batch-\" + near.predecessorAccountId()\n      : near.predecessorAccountId();\n\n    // allow each account to vote only once\n    assert(!this.voters.contains(voter), \"Voter has already voted\");\n    // fetch meme from storage\n    const meme = Meme.get();\n    // calculate new score for meme\n    meme.vote_score += value;\n    // save it back to storage\n    Meme.set(meme);\n    // remember the voter has voted\n    this.voters.set(voter);\n    // add the new Vote\n    this.votes.push(new Vote(value, voter));\n  }\n\n  /**\n   * Get a list ofrecent votes\n   */\n  @view\n  get_recent_votes(): Array<Vote> {\n    assertIsInitialized(MEME_KEY);\n    return getLast(this.votes);\n  }\n\n  /**\n   * Get the current vote score\n   */\n  @view\n  get_vote_score(): number {\n    assertIsInitialized(MEME_KEY);\n    return Meme.get().vote_score;\n  }\n\n  // ----------------------------------------------------------------------------\n  // Comments\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Add a comment\n   *\n   * @param text the text of the comment, max comment length of MAX_COMMENT_LENGTH\n   */\n  @call\n  add_comment({ text }: { text: string }): void {\n    assertIsInitialized(MEME_KEY);\n    assertIsSignerPredecessor();\n    assertReasonableCommentLength(text);\n\n    this.comments.push(new Comment(text));\n  }\n\n  /**\n   * Get a list o recent comments\n   */\n  @view\n  get_recent_comments(): Array<Comment> {\n    assertIsInitialized(MEME_KEY);\n\n    return getLast(this.comments);\n  }\n\n  // ----------------------------------------------------------------------------\n  // Donations\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Donate tokens to the contract\n   */\n  @call\n  donate(): void {\n    assertIsInitialized(MEME_KEY);\n    assertIsSignerPredecessor();\n    assert(near.attachedDeposit() > BigInt(0), \"Donor must attach some money\");\n\n    // fetch meme from storage\n    const meme = Meme.get();\n    // record the donation\n    meme.total_donations =\n      BigInt(meme.total_donations) + (near.attachedDeposit() as bigint);\n    // save it back to storage\n    Meme.set(meme);\n    // add new Donation\n    this.donations.push(new Donation());\n  }\n\n  /**\n   * Get a list of donations\n   */\n  @view\n  get_donations_total(): bigint {\n    assertIsInitialized(MEME_KEY);\n    return Meme.get().total_donations;\n  }\n\n  /**\n   * Get a list o recent comments\n   */\n  @view\n  get_recent_donations(): Array<Donation> {\n    assertIsInitialized(MEME_KEY);\n    return getLast(this.donations);\n  }\n\n  /**\n   * Transfer all donations to a specified account\n   */\n  @call\n  release_donations({ account }: { account: string }): void {\n    assertIsInitialized(MEME_KEY);\n    assertIsSignedByCreator();\n\n    // transfer funds to provided account and call ourselves back once transfer is complete\n    const promiseBatch = near.promiseBatchCreate(account);\n    near.promiseBatchActionTransfer(promiseBatch, Meme.get().total_donations);\n    const then = near.promiseThen(\n      promiseBatch,\n      near.currentAccountId(),\n      \"on_donations_released\",\n      JSON.stringify({}),\n      BigInt(0),\n      XCC_GAS\n    );\n    return near.promiseReturn(then);\n  }\n\n  /**\n   * Callback method invoked once donation release is complete\n   */\n  @call\n  on_donations_released(): void {\n    near.log(\"Donations were released\");\n  }\n}\n"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","storageRead","storage_read","storageHasKey","storage_has_key","currentAccountId","current_account_id","input","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","assert","b","str","Vote","created_at","voter","Donation","donor","Meme","creator","vote_score","total_donations","BigInt","title","data","category","isValidMemeData","meme","set","get","MEME_KEY","startsWith","Category","ONE_NEAR","XCC_GAS","MIN_ACCOUNT_BALANCE","PAGE_SIZE","MAX_COMMENT_LENGTH","getLast","vector","n","returnArray","Array","i","len","push","isInitialized","isCreator","assertIsInitialized","assertIsNotInitialized","assertIsSignedByCreator","assertReasonableCommentLength","text","length","assertIsSignerPredecessor","toString","MemeContract","defaultCall","A","get_meme","vote","batch_vote","is_batch","voters","contains","votes","get_recent_votes","get_vote_score","add_comment","comments","Comment","get_recent_comments","donate","donations","get_donations_total","get_recent_donations","release_donations","account","promiseBatch","then","on_donations_released"],"mappings":"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"}